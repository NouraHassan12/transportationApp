{"version":3,"sources":["components/NavbarComponent.js","components/TableComponent.js","actions/companyAction.js","containers/HomeContainer.js","components/BackComponent.js","validations/CompanyValidation.js","components/FormComponent.js","containers/CreateCompanyContainer.js","containers/EditCompanyContainer.js","components/DetailCompanyComponent.js","containers/DetailCompanyContainer.js","App.js","serviceWorker.js","reducers/companies.js","reducers/index.js","reducers/store.js","index.js"],"names":["NavbarComponent","Navbar","className","expand","Container","NavbarBrand","SearchBar","Search","defaultSorted","dataField","order","connect","state","getCompaniesList","companies","errorCompaniesList","props","columns","text","sort","headerStyle","width","formatter","rowContent","row","to","ID","Button","color","icon","faInfo","faEdit","bootstrap4","keyField","data","search","Row","Col","faPlus","searchProps","placeholder","baseProps","pagination","paginationFactory","Spinner","getCompanyDetail","dispatch","axios","get","then","response","console","log","Data","c","type","payload","errorMessage","catch","error","message","HomeContainer","this","Component","BackComponent","faArrowLeft","CompanyValidation","values","errors","Name","Address","TelephoneNumber","ContactPerson_Name","ContactPerson_TelephoneNumber","ContactPerson_Email","renderField","input","label","disabled","readOnly","meta","touched","md","Label","htmlFor","Input","style","FormComponent","reduxForm","form","validate","enableReinitialize","useState","selectedCountryID","setSelectedCountryID","useEffect","onSubmit","handleSubmit","FormGroup","Field","name","component","getCountriesList","onChange","e","el","target","childNodes","selectedIndex","getAttribute","initialValues","map","key","value","Value","id","getCities","city","getGetVehicleTypeList","v","submitting","TransportationCompanyBuses","Country","City","FK_OperatorID","FK_UmrahCompanyID","FK_TravelAgencyID","Masked_ID","CreateCompanyContainer","post","postCompanyCreate","getResponCompanyData","errorResponCompanyData","swal","EditCompanyContainer","match","params","put","putCompanyUpdate","errorCompanyDetail","Table","striped","DetailCompanyContainer","App","path","exact","Boolean","window","location","hostname","initialState","action","combineReducers","formReducer","store","createStore","reducer","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.099bd054.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n  Navbar,\n  NavbarBrand,\n  Container,\n} from \"reactstrap\";\n\nconst NavbarComponent = () => {\n  return (\n    <div>\n      <Navbar  className=\"nav\" expand=\"md\">\n        <Container className=\"tit\">\n          <NavbarBrand >Transportion</NavbarBrand>\n        </Container>\n      </Navbar>\n    </div>\n  );\n};\n\nexport default NavbarComponent;\n","import React from \"react\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport { Container, Button, Row, Col, Spinner } from \"reactstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faInfo,\n  faEdit,\n  faPlus,\n  \n} from \"@fortawesome/free-solid-svg-icons\";\nimport ToolkitProvider, { Search } from \"react-bootstrap-table2-toolkit\";\nimport paginationFactory from \"react-bootstrap-table2-paginator\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\n\n\nconst { SearchBar } = Search;\n\n\nconst defaultSorted = [\n  {\n    dataField: \"ID\",\n    order: \"asc\",\n  },\n];\n\n\nconst TableComponent = (props) => {\n\n  const columns = [\n    {\n      dataField: \"ID\",\n      text: \"ID\",\n      sort: true,\n      headerStyle: () => {\n        return { width: \"5%\" };\n      },\n    },\n    {\n      dataField: \"Name\",\n      text: \"Name\",\n      sort: true,\n    },\n    {\n      dataField: \"TotalFleet\",\n      text: \"TotalFleet\",\n      sort: true,\n    },\n    {\n      dataField: \"link\",\n      text: \"Action\",\n      formatter: (rowContent, row) => {\n        return (\n          <div>\n            <Link to={\"detail/\" + row.ID}>\n              <Button color=\"dark\" className=\"ml-5\">\n                <FontAwesomeIcon icon={faInfo} /> Detail\n              </Button>\n            </Link>\n  \n            <Link to={\"edit/\" + row.ID}>\n              <Button color=\"dark\" className=\"ml-5\">\n                <FontAwesomeIcon icon={faEdit} /> Edit\n              </Button>\n            </Link>\n  \n         \n          </div>\n        );\n      },\n    },\n  ];\n\n  \n  return (\n    <Container className=\"mt-4\">\n      {props.getCompaniesList ? (\n        <ToolkitProvider\n          bootstrap4\n          keyField=\"ID\"\n          data={props.getCompaniesList}\n          columns={columns}\n          defaultSorted={defaultSorted}\n          search\n        >\n          {(props) => (\n            <div>\n              <Row>\n                <Col>\n                  <Link to=\"/create\">\n                    <Button  className=\"mr-2\">\n                      <FontAwesomeIcon icon={faPlus} /> Add Transportation\n                    </Button>\n                  </Link>\n                </Col>\n                <Col>\n                  <div className=\"float-right\">\n                    <SearchBar {...props.searchProps} placeholder=\"Search ..\" />\n                  </div>\n                </Col>\n              </Row>\n\n              <BootstrapTable\n                {...props.baseProps}\n                pagination={paginationFactory()}\n              />\n            </div>\n          )}\n        </ToolkitProvider>\n      ) : (\n        <div className=\"text-center\">\n          {props.errorCompaniesList ? (\n            <h4>{props.errorCompaniesList}</h4>\n          ) : (\n            <Spinner color=\"dark\" />\n          )}\n        </div>\n      )}\n    </Container>\n  );\n};\n\n\nconst mapStateToProps = (state) => {\n  return {\n    getCompaniesList: state.companies.getCompaniesList,\n    errorCompaniesList: state.companies.errorCompaniesList,\n  };\n};\n\nexport default connect(mapStateToProps, null)(TableComponent);\n","import axios from \"axios\";\n\nexport const GET_COMPANIES_LIST = \"GET_COMPANIES_LIST\";\nexport const GET_COMPANY_DETAIL = \"GET_COMPANY_DETAIL\";\nexport const POST_COMPANY_CREATE = \"POST_COMPANY_CREATE\";\nexport const PUT_COMPANY_EDIT = \"PUT_COMPANY_EDIT\";\n\nexport const GET_COUNTRIES_lIST = \"GET_COUNTRIES_lIST\";\nexport const GET_CITIES_lIST = \"GET_CITIES_lIST\";\nexport const GET_VEHICLETYPES_lIST = \"GET_VEHICLETYPES_lIST\";\n\nexport const CLEAR_COMPANY_DETAIL = 'CLEAR_COMPANY_DETAIL'\n\n\n\nexport const clear = () => {\n  return (dispatch) => {\n    dispatch({\n      type : CLEAR_COMPANY_DETAIL,\n      payload : {data : {} , errorMessage : false}\n    })\n  }\n}\n\n\nexport const getGetVehicleTypeList = () => {\n  return (dispatch) => {\n    axios\n      .get(\"http://23.254.228.118:8080/API/api/Lookup/GetVehicleType\")\n      .then(function (response) {\n        console.log(response.data.Data,\"GetVehicleType\")\n        dispatch({\n          type:GET_VEHICLETYPES_lIST,\n          payload: {\n            data: response.data.Data,\n          \n            errorMessage: false,\n          },\n        });\n      })\n      .catch(function (error) {\n        dispatch({\n          type: GET_VEHICLETYPES_lIST,\n          payload: {\n            data: false,\n            errorMessage: error.message,\n          },\n        });\n      });\n  };\n};\n\n\nexport const getCountriesList = () => {\n  return (dispatch) => {\n    axios\n      .get(\"http://23.254.228.118:8080/API/api/Lookup/GetCountries\")\n      .then(function (response) {\n        console.log(response.data.Data,\"countries\")\n        dispatch({\n          type: GET_COUNTRIES_lIST,\n          payload: {\n            data: response.data.Data,\n          \n            errorMessage: false,\n          },\n        });\n      })\n      .catch(function (error) {\n        dispatch({\n          type: GET_COUNTRIES_lIST,\n          payload: {\n            data: false,\n            errorMessage: error.message,\n          },\n        });\n      });\n  };\n};\n\n\n\nexport const getCities = (ID) => {\n  return (dispatch) => {\n    axios\n      .get(\n        `http://23.254.228.118:8080/API/api/Lookup/GetCities?countryId=${ID}`)\n      .then(function (response) {\n        console.log(response.data.Data,\"cities\")\n      \n        dispatch({\n          type: GET_CITIES_lIST,\n          payload: {\n            data: response.data.Data,\n            errorMessage: false,\n          },\n        });\n      })\n      .catch(function (error) {\n        dispatch({\n          type: GET_CITIES_lIST,\n          payload: {\n            data: false,\n            errorMessage: error.message,\n          },\n        });\n      });\n  };\n};\nexport const getCompaniesList = () => {\n  return (dispatch) => {\n    axios\n      .get(\"http://23.254.228.118:8080/API/api/TransportationCompany/All\")\n      .then(function (response) {\n        console.log(response.data.Data,\"dataaaa\")\n        dispatch({\n          type: GET_COMPANIES_LIST,\n          payload: {\n            data: response.data.Data,\n          \n            errorMessage: false,\n          },\n        });\n      })\n      .catch(function (error) {\n        dispatch({\n          type: GET_COMPANIES_LIST,\n          payload: {\n            data: false,\n            errorMessage: error.message,\n          },\n        });\n      });\n  };\n};\n\nexport const getCompanyDetail = (ID) => {\n  return (dispatch) => {\n    axios\n      .get(\n        `http://23.254.228.118:8080/API/api/TransportationCompany/GetById?id=${ID}`)\n      .then(function (response) {\n        console.log(response.data.Data,\"Details\")\n        console.log(response.data.Data.c,\"TransportationCompanyBuses\")\n        dispatch({\n          type: GET_COMPANY_DETAIL,\n          payload: {\n            data: response.data.Data,\n            errorMessage: false,\n          },\n        });\n      })\n      .catch(function (error) {\n        dispatch({\n          type: GET_COMPANY_DETAIL,\n          payload: {\n            data: false,\n            errorMessage: error.message,\n          },\n        });\n      });\n  };\n};\n\nexport const postCompanyCreate = (data) => {\n  return (dispatch) => {\n    axios\n      .post(\n         \"http://23.254.228.118:8080/API/api/TransportationCompany/Add\",\n         {...data }\n      )\n      .then(function (response) {\n        console.log(response);\n        \n        dispatch({\n          type: POST_COMPANY_CREATE,\n            payload: {\n            data: response.data,\n            errorMessage: false,\n          },\n        });\n      })\n      .catch(function (error) {\n        dispatch({\n          type: POST_COMPANY_CREATE,\n          payload: {\n            data: false,\n            errorMessage: error.message,\n          },\n        });\n      });\n  };\n};\n\nexport const putCompanyUpdate = (data) => {\n  return (dispatch) => {\n    axios\n      .put(\n         `http://23.254.228.118:8080/API/api/TransportationCompany/Update`,\n         {...data}\n      )\n      .then(function (response) {\n        console.log(response);\n        \n        dispatch({\n          type: PUT_COMPANY_EDIT,\n          payload: {\n            data: response.data,\n            errorMessage: false,\n          },\n        });\n      })\n      .catch(function (error) {\n        dispatch({\n          type: PUT_COMPANY_EDIT,\n          payload: {\n            data: false,\n            errorMessage: error.message,\n          },\n        });\n      });\n  };\n};\n\n\n","import React, { Component } from \"react\";\nimport TableComponent from \"../components/TableComponent\";\nimport { connect } from \"react-redux\";\nimport { getCompaniesList } from '../actions/companyAction'\n\nclass HomeContainer extends Component {\n  componentDidMount() {\n    this.props.dispatch(getCompaniesList());\n\n  }\n\n  render() {\n    \n    return (\n      <div>\n        <TableComponent />\n      </div>\n    );\n  }\n}\n\n\n\nexport default connect()(HomeContainer);\n","import React from \"react\";\nimport { Row, Col, Button } from \"reactstrap\";\nimport { Link } from \"react-router-dom\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faArrowLeft } from \"@fortawesome/free-solid-svg-icons\";\n\nconst BackComponent = () => {\n  return (\n    <Row className=\"mb-2\">\n      <Col>\n        <Link to=\"/\">\n          {/* <Button color=\"dark\"> */}\n            <FontAwesomeIcon icon={faArrowLeft} />\n          {/* </Button> */}\n        </Link>\n      </Col>\n    </Row>\n  );\n};\n\nexport default BackComponent;\n","const CompanyValidation = (values) => {\n  const errors = {};\n\n  if (!values.Name || values.Name === \"\") {\n    errors.Name = \"Name is required\";\n  }\n\n  if (!values.Address || values.Address === \"\") {\n    errors.Address = \"Address is required\";\n  }\n\n  if (!values.TelephoneNumber || values.TelephoneNumber === \"\") {\n    errors.TelephoneNumber = \"TelephoneNumber is required\";\n  }\n\n  if (!values.ContactPerson_Name || values.ContactPerson_Name === \"\") {\n    errors.ContactPerson_Name = \"ContactPerson_Name is required\";\n  }\n\n  if (!values.ContactPerson_TelephoneNumber || values.ContactPerson_TelephoneNumber === \"\") {\n    errors.ContactPerson_TelephoneNumber = \"ContactPerson_TelephoneNumber is required\";\n  }\n\n\n  if (!values. ContactPerson_Email || values. ContactPerson_Email === \"\") {\n    errors. ContactPerson_Email = \" ContactPerson_Email is required\";\n  }\n \n\n  return errors\n};\n\nexport default CompanyValidation;\n","import React, { Component , useState , useEffect } from \"react\";\nimport { reduxForm, Field , FieldArray } from \"redux-form\";\nimport { connect } from \"react-redux\";\nimport { FormGroup, Col, Label, Input, Row, Button } from \"reactstrap\";\nimport CompanyValidation from \"../validations/CompanyValidation\";\nimport {getCountriesList , getCities , getGetVehicleTypeList} from '../actions/companyAction'\n\n\nconst renderField = ({\n  input,\n  type,\n  placeholder,\n  label,\n  disabled,\n  readOnly,\n  meta,\n  meta: { touched, error },\n}) => { \n\nreturn (\n  <Row>\n    <Col md=\"12\">\n      <Label htmlFor=\"{input}\" className=\"col-form-label\">\n        {label}\n      </Label>\n    </Col>\n    <Col md=\"12\">\n      <Input\n        {...input}\n        type={type}\n        placeholder={placeholder}\n        disabled={disabled}\n        readOnly={readOnly}\n      ></Input>\n      {touched &&\n        ((error && <p style={{ color: \"red\" }}>{error}</p>))}\n    </Col>\n  </Row>\n);\n}\n\n\n\nconst FormComponent = reduxForm({\n  form: \"formCreateCompany\",\n  validate: CompanyValidation,\n  enableReinitialize: true,\n\n})\n((props) => {\n\n  const [selectedCountryID , setSelectedCountryID] = useState('')\n  \n  useEffect(() => {\n    props.dispatch(getCountriesList());\n    props.dispatch(getGetVehicleTypeList())\n    //props.initialize()\n    console.log(props,\"props\")\n  }, [])\n  \n  useEffect(() => {\n    if(selectedCountryID !== ''){\n    props.dispatch(getCities(selectedCountryID));\n    } \n  }, [selectedCountryID])\n  \n  \n \n  const onchangem = (e) => {\n    let el = e.target.childNodes[e.target.selectedIndex];\n    setSelectedCountryID(el.getAttribute(\"id\"))\n    console.log( el.getAttribute(\"id\"))\n  };\n\n\n\n     return (\n      <form onSubmit={props.handleSubmit}>\n         <h5>company Data</h5>\n      \n        <FormGroup row>\n         \n          <Col md={2}>\n        \n            <FormGroup>\n              <Field\n                type=\"text\"\n                name=\"Name\"\n                component={renderField}\n                label=\"Name :\"\n              />\n            </FormGroup>\n          </Col>\n\n          <Col md={2}>\n            <FormGroup>\n              <Field\n                type=\"number\"\n                name=\"ID\"\n                component={renderField}\n                label=\"ID :\"\n              />\n            </FormGroup>\n          </Col>\n\n          <Col md={2}>\n            <FormGroup>\n              <Field\n                type=\"text\"\n                name=\"Address\"\n                component={renderField}\n                label=\"Address :\"\n              />\n            </FormGroup>\n          </Col>\n\n      \n          <Col md={3}>\n            <FormGroup>\n              <p>Country</p>\n              {props.getCountriesList ? (\n                <h2> loading countries</h2>\n              ) : (\n                <Input type=\"select\" name=\"select\" onChange={onchangem}>\n                  {props.initialValues.getCountriesList &&\n                    props.initialValues.getCountriesList.map((c) => (\n                      <option key={c.ID} value={c.Value} id={c.ID}>\n                        {c.Value}\n                      </option>\n                    ))}\n                </Input>\n              )}\n            </FormGroup>\n            </Col>\n     \n\n            <Col md={2}>\n            <FormGroup>\n\n         <p>City</p>\n         {props.getCities ? (\n         \n              <h2> loading Cities</h2>\n          ) : (\n            <Input type=\"select\" name=\"select\" >{\n              props.initialValues &&\n              props.initialValues.getCities &&\n              props.initialValues.getCities.map((city)=>(\n                (<option key={city.ID} >{city.Value}</option>)\n              ))}</Input>\n          )}\n\n       </FormGroup>\n       </Col> \n\n\n          <Col md={2}>\n            <FormGroup>\n              <Field\n                type=\"text\"\n                name=\"TelephoneNumber\"\n                component={renderField}\n                label=\"TelephoneNumber :\"\n              />\n            </FormGroup>\n          </Col>\n\n          <Col md={3}>\n            <FormGroup>\n              <Field\n                type=\"text\"\n                name=\"ContactPerson_Name\"\n                component={renderField}\n                label=\"ContactPerson_Name :\"\n              />\n            </FormGroup>\n          </Col>\n\n          <Col md={3}>\n            <FormGroup>\n              <Field\n                type=\"text\"\n                name=\"ContactPerson_TelephoneNumber\"\n                component={renderField}\n                label=\"ContactPerson_TelephoneNumber :\"\n              />\n            </FormGroup>\n          </Col>\n\n          <Col md={3}>\n            <FormGroup>\n              <Field\n                type=\"text\"\n                name=\"ContactPerson_Email\"\n                component={renderField}\n                label=\"ContactPerson_Email :\"\n              />\n            </FormGroup>\n          </Col>\n\n         \n        </FormGroup>\n        <h5>Bus Data</h5>\n        <FormGroup row>\n\n          <Col md={2}>\n            <FormGroup>\n\n         <p>vehicle type</p>\n         {props.getGetVehicleTypeList ? (\n         \n              <h2> loading VehicleTypeList</h2>\n          ) : (\n            <Input type=\"select\" name=\"select\" >{\n              props.initialValues &&\n              props.initialValues.getGetVehicleTypeList &&\n              props.initialValues.getGetVehicleTypeList.map((v)=>(\n                (<option key={v.ID} >{v.Value}</option>)\n              ))}</Input>\n          )}\n\n       </FormGroup>\n       </Col> \n      \n\n\n      <Col md={3}>\n        \n        <FormGroup>\n          <Field\n            type=\"string\"\n            name=\"TransportationCompanyBuses[0][Brand]\"\n            component={renderField}\n            label=\"Brand :\"\n          />\n        </FormGroup>\n      </Col>\n\n\n      <Col md={3}>\n        \n        <FormGroup>\n          <Field\n            type=\"number\"\n            name=\"TransportationCompanyBuses[0][Number_Of_Seats]\"\n            component={renderField}\n            label=\"Number_Of_Seats :\"\n          />\n        </FormGroup>\n      </Col>\n\n      <Col md={3}>\n        \n        <FormGroup>\n          <Field\n            type=\"number\"\n            name=\"TransportationCompanyBuses[0][Number_Of_Seats_Per_Raw]\"\n            component={renderField}\n            label=\"Number_Of_Seats_Per_Raw :\"\n          />\n        </FormGroup>\n      </Col>\n\n\n      <Col md={3}>\n        \n        <FormGroup>\n          <Field\n            type=\"number\"\n            name=\"TransportationCompanyBuses[0][Total_Number_Of_Buses]\"\n            component={renderField}\n            label=\"Total_Number_Of_Buses :\"\n          />\n        </FormGroup>\n      </Col>\n\n      {/* <Col md={3}>\n        \n        <FormGroup>\n          <Field\n            type=\"string\"\n            name=\"Bus_Layou\"\n            component={renderField}\n            label=\"Bus_Layou :\"\n          />\n        </FormGroup>\n      </Col> */}\n\n      <Col md={3}>\n        \n        <FormGroup>\n          <Field\n            type=\"number\"\n            name=\"TransportationCompanyBuses[0][YearModel]\"\n            component={renderField}\n            label=\"YearModel :\"\n          />\n        </FormGroup>\n      </Col>\n{/* \n      <Col md={3}>\n        \n        <FormGroup>\n          <Field\n            type=\"string\"\n            name=\"Notes\"\n            component={renderField}\n            label=\"Notes :\"\n          />\n        </FormGroup>\n      </Col> */}\n\n\n      {/* <Col md={3}>\n        \n        <FormGroup>\n          <Field\n            type=\"string\"\n            name=\"Description\"\n            component={renderField}\n            label=\"Description :\"\n          />\n        </FormGroup>\n      </Col> */}\n\n\n      <Col md={3}>\n        \n        <FormGroup>\n          <Field\n            type=\"number\"\n            name=\"TransportationCompanyBuses[0][FK_OperatorID]\"\n            component={renderField}\n            label=\"FK_OperatorID :\"\n          />\n        </FormGroup>\n      </Col>\n\n\n      <Col md={3}>\n        \n        <FormGroup>\n          <Field\n            type=\"number\"\n            name=\"TransportationCompanyBuses[0].FK_UmrahCompanyID\"\n            component={renderField}\n            label=\"FK_UmrahCompanyID :\"\n          />\n        </FormGroup>\n      </Col>\n\n      <Col md={3}>\n        \n        <FormGroup>\n          <Field\n            type=\"number\"\n            name=\"FK_TravelAgencyID\"\n            component={renderField}\n            label=\"FK_TravelAgencyID :\"\n          />\n        </FormGroup>\n      </Col>\n\n\n      <Col md={3}>\n        \n        <FormGroup>\n          <Field\n            type=\"string\"\n            name=\"Masked_ID\"\n            component={renderField}\n            label=\"Masked_ID :\"\n          />\n        </FormGroup>\n      </Col>\n        </FormGroup>\n\n        <FormGroup row>\n          <Col md=\"6\">\n            <FormGroup>\n              <Button\n                color=\"dark\"\n                type=\"submit\"\n                disabled={props.submitting}\n              >\n                Save\n              </Button>\n          \n            </FormGroup>\n          </Col>\n        </FormGroup>\n      </form>\n\n    );\n})\n\n\n\n\nconst mapStateToProps = (state) => {\n//console.log(state)\n  return {\n    initialValues : {\n      TransportationCompanyBuses : state.companies.getCompanyDetail.TransportationCompanyBuses\n      ,Name : state.companies.getCompanyDetail.Name,\n      ID : state.companies.getCompanyDetail.ID,\n      Address : state.companies.getCompanyDetail.Address,\n      Country : state.companies.getCompanyDetail.Country,\n      City : state.companies.getCompanyDetail.City,\n      TelephoneNumber : state.companies.getCompanyDetail.TelephoneNumber,\n      ContactPerson_Name : state.companies.getCompanyDetail.ContactPerson_Name,\n      ContactPerson_TelephoneNumber : state.companies.getCompanyDetail.ContactPerson_Name,\n      ContactPerson_Email : state.companies.getCompanyDetail.ContactPerson_Email,\n      FK_OperatorID : state.companies.getCompanyDetail.FK_OperatorID,\n      FK_UmrahCompanyID : state.companies.getCompanyDetail.FK_UmrahCompanyID,\n      FK_TravelAgencyID : state.companies.getCompanyDetail.FK_TravelAgencyID,\n      Masked_ID : state.companies.getCompanyDetail.Masked_ID,\n      getCountriesList : state.companies.getCountriesList,\n      getCities : state.companies.getCities,\n      getGetVehicleTypeList : state.companies.getGetVehicleTypeList,\n \n\n\n    }\n  };\n};\nexport default connect(mapStateToProps, null)(FormComponent);\n","import React, { Component } from \"react\";\nimport { Container } from \"reactstrap\";\nimport BackComponent from \"../components/BackComponent\";\nimport FormComponent from \"../components/FormComponent\";\nimport { connect } from \"react-redux\";\nimport { postCompanyCreate } from \"../actions/companyAction\";\nimport swal from \"sweetalert\";\n\n\n\nclass CreateCompanyContainer extends Component {\n\n  handleSubmit(data) {\n    this.props.dispatch(postCompanyCreate(data));\n  }\n\n  render() {\n    if (this.props.getResponCompanyData || this.props.errorResponCompanyData) {\n      if(this.props.errorResponCompanyData)\n      {\n        swal(\n            \"Failed!\",\n            this.props.errorResponCompanyData,\n            \"error\"\n          );\n      }else {\n        swal(\n            \"Company Created!\",\n            \"success\"\n          );\n      }\n    }\n    return (\n      <Container>\n        <BackComponent />\n       \n        <FormComponent onSubmit={(data) => this.handleSubmit(data)} />\n      </Container>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    getResponCompanyData: state.companies.getResponCompanyData,\n    errorResponCompanyData: state.companies.errorResponCompanyData,\n  };\n};\nexport default connect(mapStateToProps, null)(CreateCompanyContainer);\n","import React, { Component } from \"react\";\nimport { Container } from \"reactstrap\";\nimport BackComponent from \"../components/BackComponent\";\nimport { connect } from \"react-redux\";\nimport FormComponent from \"../components/FormComponent\";\nimport { getCompanyDetail, putCompanyUpdate , clear } from \"../actions/companyAction\";\nimport swal from \"sweetalert\";\n\nconst mapStateToProps = (state) => {\n  return {\n    getResponCompanyData: state.companies.getResponCompanyData,\n    errorResponCompanyData: state.companies.errorResponCompanyData,\n  };\n};\n\nclass EditCompanyContainer extends Component {\n  componentDidMount() {\n    this.props.dispatch(getCompanyDetail(this.props.match.params.id));\n  }\n\n  componentWillUnmount() {\n    this.props.dispatch(clear())\n  }\n\n  handleSubmit(data) {\n  console.log(data, 'handlesubmit')\n    this.props.dispatch(putCompanyUpdate(data, this.props.match.params.id));\n  }\n\n  render() {\n  \t\n  \tconsole.log(this.props)\n  \n    if (this.props.getResponCompanyData || this.props.errorResponCompanyData) {\n      if (this.props.errorResponCompanyData) {\n        swal(\"Failed!\", this.props.errorResponCompanyData, \"error\");\n      } else {\n        swal(\n          \"Company Updated!\",\n          \n        );\n      }\n    }\n    return (\n      <Container>\n        <BackComponent />\n        <FormComponent onSubmit={(data) => this.handleSubmit(data)} />\n      </Container>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, null)(EditCompanyContainer);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Table } from \"reactstrap\";\n\n\n\nconst DetailCompanyComponent = (props) => {\n  return (\n    <Table striped>\n      <tbody>\n        <tr>\n          <td width=\"200\"> Compny Name</td>\n          <td width=\"10\">:</td>\n          <td>{props.getCompanyDetail.Name}</td>\n          </tr>\n         \n          <tr> \n          <td width=\"200\"> ContactPerson_Name</td>\n          <td width=\"10\">:</td>\n          <td>{props.getCompanyDetail.ContactPerson_Name}</td>\n           </tr>\n          <tr> \n          <td width=\"200\"> ContactPerson_TelephoneNumber</td>\n          <td width=\"10\">:</td>\n          <td>{props.getCompanyDetail.ContactPerson_TelephoneNumber}</td> \n            </tr>\n          <tr> \n          <td width=\"200\"> ContactPerson_Email</td>\n          <td width=\"10\">:</td>\n          <td>{props.getCompanyDetail.ContactPerson_Email}</td>\n           </tr>\n          <tr> \n          <td width=\"200\"> TelephoneNumber</td>\n          <td width=\"10\">:</td>\n          <td>{props.getCompanyDetail.TelephoneNumber}</td> </tr>\n\n       \n   \n\n      </tbody>\n    </Table>\n  );\n};\n\n\nconst mapStateToProps = (state) => {\n  return {\n    getCompanyDetail: state.companies.getCompanyDetail,\n    errorCompanyDetail: state.companies.errorCompanyDetail,\n  };\n};\n\nexport default connect(mapStateToProps, null)(DetailCompanyComponent);\n","import React, { Component } from \"react\";\nimport { Container } from \"reactstrap\";\nimport BackComponent from \"../components/BackComponent\";\nimport { connect } from \"react-redux\";\nimport {getCompanyDetail } from \"../actions/companyAction\";\nimport DetailCompanyComponent from \"../components/DetailCompanyComponent\";\n\nclass DetailCompanyContainer extends Component {\n  componentDidMount() {\n    this.props.dispatch(getCompanyDetail(this.props.match.params.id));\n  }\n\n  render() {\n    return (\n      <Container>\n        <BackComponent />\n        <h5>Company Details</h5>\n        <DetailCompanyComponent />\n      </Container>\n    );\n  }\n}\n\nexport default connect()(DetailCompanyContainer);\n","import React, { Component } from \"react\";\nimport NavbarComponent from \"./components/NavbarComponent\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport HomeContainer from \"./containers/HomeContainer\";\nimport CreateCompanyContainer from \"./containers/CreateCompanyContainer\";\nimport EditCompanyContainer from \"./containers/EditCompanyContainer\";\nimport DetailCompanyContainer from \"./containers/DetailCompanyContainer\";\nimport './App.css'\n\nexport default class App extends Component {\n  render() {\n    return (\n      <div>\n        <NavbarComponent />\n        <BrowserRouter>\n          <Route path=\"/\" exact component={HomeContainer} />\n\n          <Route path=\"/create\" exact component={CreateCompanyContainer} />\n\n          <Route path=\"/detail/:id\" exact component={DetailCompanyContainer} />\n\n          <Route path=\"/edit/:id\" exact component={EditCompanyContainer} />\n        </BrowserRouter>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n  GET_COMPANIES_LIST,\n  GET_COMPANY_DETAIL,\n  POST_COMPANY_CREATE,\n  PUT_COMPANY_EDIT,\n  GET_COUNTRIES_lIST,\n  GET_CITIES_lIST,\n  GET_VEHICLETYPES_lIST,\n  CLEAR_COMPANY_DETAIL\n\n} from \"../actions/companyAction\";\n\nlet initialState = {\n  getCompaniesList: false,\n  getCountriesList:false,\n  getCities:false,\n  getGetVehicleTypeList:false,\n  errorCompaniesList: false,\n  getCompanyDetail: false,\n  errorCompanyDetail: false,\n  getResponCompanyData: false,\n  errorResponCompanyData: false,\n \n};\n\nconst companies = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_COMPANIES_LIST:\n      return {\n        ...state,\n        getCompaniesList: action.payload.data,\n        errorCompaniesList: action.payload.errorMessage,\n      };\n\n\n      case GET_VEHICLETYPES_lIST:\n        return {\n          ...state,\n          getGetVehicleTypeList: action.payload.data,\n         \n        };\n\n      case GET_COUNTRIES_lIST:\n        return {\n          ...state,\n          getCountriesList: action.payload.data,\n        };\n\n        case GET_CITIES_lIST:\n          return {\n            ...state,\n            getCities: action.payload.data,\n            \n          };\n\n    case CLEAR_COMPANY_DETAIL : \n          return {\n            ...state,\n            getCompanyDetail : false,\n            errorCompanyDetail : false\n          }\n\n    case GET_COMPANY_DETAIL:\n      return {\n        ...state,\n        getCompanyDetail: action.payload.data,\n        errorCompanyDetail: action.payload.errorMessage,\n      };\n\n    case POST_COMPANY_CREATE:\n      return {\n        ...state,\n        getResponCompanyData: action.payload.data,\n        errorResponCompanyData: action.payload.errorMessage,\n      };\n\n    case PUT_COMPANY_EDIT:\n      return {\n        ...state,\n        getResponCompanyData: action.payload.data,\n        errorResponCompanyData: action.payload.errorMessage,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default companies;\n","import { combineReducers } from 'redux'\nimport companies from './companies'\nimport { reducer as formReducer } from 'redux-form'\n\n\nexport default combineReducers({\n    companies,\n    form: formReducer\n})","import {createStore, applyMiddleware} from 'redux';\r\nimport {composeWithDevTools} from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\nimport reducer from \"./index\";\r\n// const devTools = process.env.NODE_ENV === 'development' ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__() : null\r\nconst store = createStore(reducer, composeWithDevTools(applyMiddleware(thunk)));\r\n\r\nexport default store","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\nimport { Provider } from \"react-redux\";\nimport store from './reducers/store';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}